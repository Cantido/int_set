Operating System: Windows
CPU Information: Intel(R) Core(TM) i7-4770K CPU @ 3.50GHz
Number of Available Cores: 8
Available memory: 15.94 GB
Elixir 1.11.0
Erlang 21.3

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 5 s
memory time: 2 s
parallel: 4
inputs: Middle (100 Thousand), Small (1 Thousand)
Estimated total run time: 36 s

Benchmarking IntSet.new with input Middle (100 Thousand)...
Benchmarking IntSet.new with input Small (1 Thousand)...
Benchmarking MapSet.new with input Middle (100 Thousand)...
Benchmarking MapSet.new with input Small (1 Thousand)...

##### With input Middle (100 Thousand) #####
Name                 ips        average  deviation         median         99th %
MapSet.new         29.39       34.03 ms    ±24.89%       31.00 ms       47.00 ms
IntSet.new          7.91      126.36 ms    ±13.47%      125.00 ms      172.00 ms

Comparison: 
MapSet.new         29.39
IntSet.new          7.91 - 3.71x slower +92.33 ms

Memory usage statistics:

Name               average  deviation         median         99th %
MapSet.new         3.93 MB     ±0.00%        3.93 MB        3.93 MB
IntSet.new        51.21 MB     ±1.17%       51.54 MB       51.58 MB

Comparison: 
MapSet.new         3.93 MB
IntSet.new        51.21 MB - 13.04x memory usage +47.28 MB

##### With input Small (1 Thousand) #####
Name                 ips        average  deviation         median         99th %
MapSet.new        5.96 K      167.91 μs    ±34.39%      159.84 μs      319.84 μs
IntSet.new        2.46 K      406.39 μs    ±22.66%      459.84 μs      629.84 μs

Comparison: 
MapSet.new        5.96 K
IntSet.new        2.46 K - 2.42x slower +238.47 μs

Memory usage statistics:

Name               average  deviation         median         99th %
MapSet.new        63.49 KB     ±0.06%       63.46 KB       63.55 KB
IntSet.new       301.74 KB     ±3.38%         299 KB      318.98 KB

Comparison: 
MapSet.new        63.46 KB
IntSet.new       301.74 KB - 4.75x memory usage +238.25 KB
Operating System: Windows
CPU Information: Intel(R) Core(TM) i7-4770K CPU @ 3.50GHz
Number of Available Cores: 8
Available memory: 15.94 GB
Elixir 1.11.0
Erlang 21.3

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 5 s
memory time: 2 s
parallel: 4
inputs: Middle (100 Thousand), Small (1 Thousand)
Estimated total run time: 36 s

Benchmarking Enum.member? IntSet with existing member with input Middle (100 Thousand)...
Benchmarking Enum.member? IntSet with existing member with input Small (1 Thousand)...
Benchmarking Enum.member? MapSet with existing member with input Middle (100 Thousand)...
Benchmarking Enum.member? MapSet with existing member with input Small (1 Thousand)...

##### With input Middle (100 Thousand) #####
Name                                               ips        average  deviation         median         99th %
Enum.member? MapSet with existing member        5.94 M      168.37 ns   ±945.16%           0 ns       14984 ns
Enum.member? IntSet with existing member        3.96 M      252.29 ns    ±38.63%         294 ns         454 ns

Comparison: 
Enum.member? MapSet with existing member        5.94 M
Enum.member? IntSet with existing member        3.96 M - 1.50x slower +83.92 ns

Memory usage statistics:

Name                                        Memory usage
Enum.member? MapSet with existing member            24 B
Enum.member? IntSet with existing member           120 B - 5.00x memory usage +96 B

**All measurements for memory usage were the same**

##### With input Small (1 Thousand) #####
Name                                               ips        average  deviation         median         99th %
Enum.member? MapSet with existing member        5.93 M      168.62 ns    ±47.87%         144 ns         304 ns
Enum.member? IntSet with existing member        3.31 M      301.99 ns   ±179.68%           0 ns        1584 ns

Comparison: 
Enum.member? MapSet with existing member        5.93 M
Enum.member? IntSet with existing member        3.31 M - 1.79x slower +133.37 ns

Memory usage statistics:

Name                                        Memory usage
Enum.member? MapSet with existing member            24 B
Enum.member? IntSet with existing member           120 B - 5.00x memory usage +96 B

**All measurements for memory usage were the same**
Operating System: Windows
CPU Information: Intel(R) Core(TM) i7-4770K CPU @ 3.50GHz
Number of Available Cores: 8
Available memory: 15.94 GB
Elixir 1.11.0
Erlang 21.3

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 5 s
memory time: 2 s
parallel: 4
inputs: Middle (100 Thousand), Small (1 Thousand)
Estimated total run time: 36 s

Benchmarking Enum.member? IntSet with nonexisting member with input Middle (100 Thousand)...
Benchmarking Enum.member? IntSet with nonexisting member with input Small (1 Thousand)...
Benchmarking Enum.member? MapSet with nonexisting member with input Middle (100 Thousand)...
Benchmarking Enum.member? MapSet with nonexisting member with input Small (1 Thousand)...

##### With input Middle (100 Thousand) #####
Name                                                  ips        average  deviation         median         99th %
Enum.member? MapSet with nonexisting member        6.75 M      148.19 ns    ±49.60%         144 ns         304 ns
Enum.member? IntSet with nonexisting member        4.37 M      228.95 ns    ±40.63%         294 ns         454 ns

Comparison: 
Enum.member? MapSet with nonexisting member        6.75 M
Enum.member? IntSet with nonexisting member        4.37 M - 1.54x slower +80.75 ns

Memory usage statistics:

Name                                           Memory usage
Enum.member? MapSet with nonexisting member            24 B
Enum.member? IntSet with nonexisting member           120 B - 5.00x memory usage +96 B

**All measurements for memory usage were the same**

##### With input Small (1 Thousand) #####
Name                                                  ips        average  deviation         median         99th %
Enum.member? MapSet with nonexisting member        6.54 M      152.80 ns    ±51.89%         144 ns         304 ns
Enum.member? IntSet with nonexisting member        4.64 M      215.29 ns    ±42.35%         144 ns         454 ns

Comparison: 
Enum.member? MapSet with nonexisting member        6.54 M
Enum.member? IntSet with nonexisting member        4.64 M - 1.41x slower +62.49 ns

Memory usage statistics:

Name                                           Memory usage
Enum.member? MapSet with nonexisting member            24 B
Enum.member? IntSet with nonexisting member           120 B - 5.00x memory usage +96 B

**All measurements for memory usage were the same**
Operating System: Windows
CPU Information: Intel(R) Core(TM) i7-4770K CPU @ 3.50GHz
Number of Available Cores: 8
Available memory: 15.94 GB
Elixir 1.11.0
Erlang 21.3

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 5 s
memory time: 2 s
parallel: 4
inputs: Middle (100 Thousand), Small (1 Thousand)
Estimated total run time: 36 s

Benchmarking IntSet.put with existing member with input Middle (100 Thousand)...
Benchmarking IntSet.put with existing member with input Small (1 Thousand)...
Benchmarking MapSet.put with existing member with input Middle (100 Thousand)...
Benchmarking MapSet.put with existing member with input Small (1 Thousand)...

##### With input Middle (100 Thousand) #####
Name                                      ips        average  deviation         median         99th %
MapSet.put with existing member        1.73 M        0.58 μs   ±113.33%        0.45 μs        1.58 μs
IntSet.put with existing member      0.0457 M       21.87 μs   ±219.12%           0 μs      159.98 μs

Comparison: 
MapSet.put with existing member        1.73 M
IntSet.put with existing member      0.0457 M - 37.93x slower +21.29 μs

Memory usage statistics:

Name                                    average  deviation         median         99th %
MapSet.put with existing member         0.58 KB     ±2.42%        0.56 KB        0.59 KB
IntSet.put with existing member         6.26 KB    ±20.33%        6.20 KB        8.40 KB

Comparison: 
MapSet.put with existing member         0.56 KB
IntSet.put with existing member         6.26 KB - 10.87x memory usage +5.69 KB

##### With input Small (1 Thousand) #####
Name                                      ips        average  deviation         median         99th %
MapSet.put with existing member        5.87 M      170.24 ns    ±45.88%         144 ns         304 ns
IntSet.put with existing member        1.31 M      760.94 ns    ±97.98%         764 ns        1584 ns

Comparison: 
MapSet.put with existing member        5.87 M
IntSet.put with existing member        1.31 M - 4.47x slower +590.69 ns

Memory usage statistics:

Name                                    average  deviation         median         99th %
MapSet.put with existing member        391.87 B     ±4.80%          400 B          408 B
IntSet.put with existing member        271.80 B    ±16.53%          232 B          328 B

Comparison: 
MapSet.put with existing member           400 B
IntSet.put with existing member        271.80 B - 0.69x memory usage -120.07589 B
Operating System: Windows
CPU Information: Intel(R) Core(TM) i7-4770K CPU @ 3.50GHz
Number of Available Cores: 8
Available memory: 15.94 GB
Elixir 1.11.0
Erlang 21.3

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 5 s
memory time: 2 s
parallel: 4
inputs: Middle (100 Thousand), Small (1 Thousand)
Estimated total run time: 36 s

Benchmarking IntSet.put with nonexisting member with input Middle (100 Thousand)...
Benchmarking IntSet.put with nonexisting member with input Small (1 Thousand)...
Benchmarking MapSet.put with nonexisting member with input Middle (100 Thousand)...
Benchmarking MapSet.put with nonexisting member with input Small (1 Thousand)...

##### With input Middle (100 Thousand) #####
Name                                         ips        average  deviation         median         99th %
MapSet.put with nonexisting member        1.85 M        0.54 μs   ±119.48%        0.29 μs        1.58 μs
IntSet.put with nonexisting member      0.0465 M       21.50 μs    ±42.13%       15.98 μs       46.98 μs

Comparison: 
MapSet.put with nonexisting member        1.85 M
IntSet.put with nonexisting member      0.0465 M - 39.84x slower +20.96 μs

Memory usage statistics:

Name                                       average  deviation         median         99th %
MapSet.put with nonexisting member         0.59 KB     ±4.11%        0.57 KB        0.61 KB
IntSet.put with nonexisting member         5.33 KB    ±30.80%           5 KB        6.96 KB

Comparison: 
MapSet.put with nonexisting member         0.57 KB
IntSet.put with nonexisting member         5.33 KB - 9.10x memory usage +4.75 KB

##### With input Small (1 Thousand) #####
Name                                         ips        average  deviation         median         99th %
MapSet.put with nonexisting member        6.14 M      162.93 ns    ±48.07%      144.40 ns      304.40 ns
IntSet.put with nonexisting member        1.29 M      775.79 ns    ±94.60%      614.40 ns     1584.40 ns

Comparison: 
MapSet.put with nonexisting member        6.14 M
IntSet.put with nonexisting member        1.29 M - 4.76x slower +612.86 ns

Memory usage statistics:

Name                                       average  deviation         median         99th %
MapSet.put with nonexisting member        369.98 B     ±3.20%          368 B          384 B
IntSet.put with nonexisting member        275.63 B    ±19.99%          248 B          336 B

Comparison: 
MapSet.put with nonexisting member           368 B
IntSet.put with nonexisting member        275.63 B - 0.74x memory usage -94.35143 B
Operating System: Windows
CPU Information: Intel(R) Core(TM) i7-4770K CPU @ 3.50GHz
Number of Available Cores: 8
Available memory: 15.94 GB
Elixir 1.11.0
Erlang 21.3

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 5 s
memory time: 2 s
parallel: 4
inputs: Middle (100 Thousand), Small (1 Thousand)
Estimated total run time: 36 s

Benchmarking IntSet.union with input Middle (100 Thousand)...
Benchmarking IntSet.union with input Small (1 Thousand)...
Benchmarking MapSet.union with input Middle (100 Thousand)...
Benchmarking MapSet.union with input Small (1 Thousand)...

##### With input Middle (100 Thousand) #####
Name                   ips        average  deviation         median         99th %
IntSet.union       26.07 K      0.0384 ms   ±153.66%           0 ms       0.160 ms
MapSet.union        0.32 K        3.13 ms   ±175.58%           0 ms       16.00 ms

Comparison: 
IntSet.union       26.07 K
MapSet.union        0.32 K - 81.65x slower +3.09 ms

Memory usage statistics:

Name                 average  deviation         median         99th %
IntSet.union        24.79 KB     ±0.15%       24.81 KB       24.81 KB
MapSet.union       345.73 KB     ±1.32%      347.68 KB      349.47 KB

Comparison: 
IntSet.union        24.81 KB
MapSet.union       345.73 KB - 13.95x memory usage +320.94 KB

##### With input Small (1 Thousand) #####
Name                   ips        average  deviation         median         99th %
IntSet.union      586.66 K        1.70 μs    ±41.08%        1.59 μs        3.19 μs
MapSet.union       61.76 K       16.19 μs    ±44.23%       15.98 μs       31.98 μs

Comparison: 
IntSet.union      586.66 K
MapSet.union       61.76 K - 9.50x slower +14.49 μs

Memory usage statistics:

Name                 average  deviation         median         99th %
IntSet.union         0.77 KB     ±0.00%        0.77 KB        0.77 KB
MapSet.union         8.12 KB     ±2.44%        8.20 KB        8.29 KB

Comparison: 
IntSet.union         0.77 KB
MapSet.union         8.12 KB - 10.50x memory usage +7.35 KB
Operating System: Windows
CPU Information: Intel(R) Core(TM) i7-4770K CPU @ 3.50GHz
Number of Available Cores: 8
Available memory: 15.94 GB
Elixir 1.11.0
Erlang 21.3

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 5 s
memory time: 2 s
parallel: 4
inputs: Middle (100 Thousand), Small (1 Thousand)
Estimated total run time: 36 s

Benchmarking IntSet.difference with input Middle (100 Thousand)...
Benchmarking IntSet.difference with input Small (1 Thousand)...
Benchmarking MapSet.difference with input Middle (100 Thousand)...
Benchmarking MapSet.difference with input Small (1 Thousand)...

##### With input Middle (100 Thousand) #####
Name                        ips        average  deviation         median         99th %
IntSet.difference       23.20 K      0.0431 ms    ±26.67%      0.0470 ms      0.0783 ms
MapSet.difference       0.112 K        8.93 ms    ±82.71%       15.00 ms       16.00 ms

Comparison: 
IntSet.difference       23.20 K
MapSet.difference       0.112 K - 207.14x slower +8.88 ms

Memory usage statistics:

Name                      average  deviation         median         99th %
IntSet.difference       0.0481 MB     ±0.00%      0.0481 MB      0.0481 MB
MapSet.difference         3.29 MB     ±4.09%        3.42 MB        3.43 MB

Comparison: 
IntSet.difference       0.0481 MB
MapSet.difference         3.29 MB - 68.40x memory usage +3.24 MB

##### With input Small (1 Thousand) #####
Name                        ips        average  deviation         median         99th %
IntSet.difference      589.11 K        1.70 μs   ±252.80%           0 μs       15.98 μs
MapSet.difference       16.17 K       61.84 μs   ±108.52%       46.98 μs      159.98 μs

Comparison: 
IntSet.difference      589.11 K
MapSet.difference       16.17 K - 36.43x slower +60.14 μs

Memory usage statistics:

Name                      average  deviation         median         99th %
IntSet.difference         0.93 KB     ±4.01%        0.95 KB        0.95 KB
MapSet.difference        17.00 KB     ±2.15%       16.77 KB       17.61 KB

Comparison: 
IntSet.difference         0.95 KB
MapSet.difference        17.00 KB - 18.26x memory usage +16.07 KB
Operating System: Windows
CPU Information: Intel(R) Core(TM) i7-4770K CPU @ 3.50GHz
Number of Available Cores: 8
Available memory: 15.94 GB
Elixir 1.11.0
Erlang 21.3

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 5 s
memory time: 2 s
parallel: 4
inputs: Middle (100 Thousand), Small (1 Thousand)
Estimated total run time: 36 s

Benchmarking IntSet.intersection with input Middle (100 Thousand)...
Benchmarking IntSet.intersection with input Small (1 Thousand)...
Benchmarking MapSet.intersection with input Middle (100 Thousand)...
Benchmarking MapSet.intersection with input Small (1 Thousand)...

##### With input Middle (100 Thousand) #####
Name                          ips        average  deviation         median         99th %
IntSet.intersection       25.38 K      0.0394 ms    ±27.54%      0.0320 ms      0.0630 ms
MapSet.intersection      0.0934 K       10.71 ms    ±68.03%       15.00 ms       16.00 ms

Comparison: 
IntSet.intersection       25.38 K
MapSet.intersection      0.0934 K - 271.83x slower +10.67 ms

Memory usage statistics:

Name                        average  deviation         median         99th %
IntSet.intersection       0.0242 MB     ±0.00%      0.0242 MB      0.0242 MB
MapSet.intersection         2.65 MB     ±0.22%        2.64 MB        2.65 MB

Comparison: 
IntSet.intersection       0.0242 MB
MapSet.intersection         2.65 MB - 109.16x memory usage +2.62 MB

##### With input Small (1 Thousand) #####
Name                          ips        average  deviation         median         99th %
IntSet.intersection      581.64 K        1.72 μs    ±38.70%        1.58 μs        3.18 μs
MapSet.intersection       14.50 K       68.96 μs   ±411.92%           0 μs     1599.98 μs

Comparison: 
IntSet.intersection      581.64 K
MapSet.intersection       14.50 K - 40.11x slower +67.24 μs

Memory usage statistics:

Name                        average  deviation         median         99th %
IntSet.intersection         0.77 KB     ±0.00%        0.77 KB        0.77 KB
MapSet.intersection        36.86 KB     ±1.35%       36.46 KB       37.51 KB

Comparison: 
IntSet.intersection         0.77 KB
MapSet.intersection        36.86 KB - 47.66x memory usage +36.09 KB
Operating System: Windows
CPU Information: Intel(R) Core(TM) i7-4770K CPU @ 3.50GHz
Number of Available Cores: 8
Available memory: 15.94 GB
Elixir 1.11.0
Erlang 21.3

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 5 s
memory time: 2 s
parallel: 4
inputs: Middle (100 Thousand), Small (1 Thousand)
Estimated total run time: 36 s

Benchmarking IntSet.equal? when the sets are equal with input Middle (100 Thousand)...
Benchmarking IntSet.equal? when the sets are equal with input Small (1 Thousand)...
Benchmarking MapSet.equal? when the sets are equal with input Middle (100 Thousand)...
Benchmarking MapSet.equal? when the sets are equal with input Small (1 Thousand)...

##### With input Middle (100 Thousand) #####
Name                                            ips        average  deviation         median         99th %
MapSet.equal? when the sets are equal       13.62 M      0.0734 μs    ±92.08%      0.0790 μs       0.145 μs
IntSet.equal? when the sets are equal      0.0175 M       57.13 μs    ±21.26%       46.98 μs       93.98 μs

Comparison: 
MapSet.equal? when the sets are equal       13.62 M
IntSet.equal? when the sets are equal      0.0175 M - 777.81x slower +57.05 μs

Memory usage statistics:

Name                                          average  deviation         median         99th %
MapSet.equal? when the sets are equal            0 KB     ±0.00%           0 KB           0 KB
IntSet.equal? when the sets are equal       128.61 KB     ±0.21%      128.48 KB      129.09 KB

Comparison: 
MapSet.equal? when the sets are equal            0 KB
IntSet.equal? when the sets are equal       128.61 KB - ∞ x memory usage +128.61 KB

##### With input Small (1 Thousand) #####
Name                                            ips        average  deviation         median         99th %
MapSet.equal? when the sets are equal       13.54 M       73.86 ns    ±91.35%          79 ns         145 ns
IntSet.equal? when the sets are equal        1.09 M      914.12 ns    ±81.56%        1485 ns        1585 ns

Comparison: 
MapSet.equal? when the sets are equal       13.54 M
IntSet.equal? when the sets are equal        1.09 M - 12.38x slower +840.26 ns

Memory usage statistics:

Name                                          average  deviation         median         99th %
MapSet.equal? when the sets are equal            0 KB     ±0.00%           0 KB           0 KB
IntSet.equal? when the sets are equal         1.84 KB    ±10.96%        1.75 KB        2.18 KB

Comparison: 
MapSet.equal? when the sets are equal            0 KB
IntSet.equal? when the sets are equal         1.84 KB - ∞ x memory usage +1.84 KB
Operating System: Windows
CPU Information: Intel(R) Core(TM) i7-4770K CPU @ 3.50GHz
Number of Available Cores: 8
Available memory: 15.94 GB
Elixir 1.11.0
Erlang 21.3

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 5 s
memory time: 2 s
parallel: 4
inputs: Middle (100 Thousand), Small (1 Thousand)
Estimated total run time: 36 s

Benchmarking IntSet.equal? when the sets are not equal with input Middle (100 Thousand)...
Benchmarking IntSet.equal? when the sets are not equal with input Small (1 Thousand)...
Benchmarking MapSet.equal? when the sets are not equal with input Middle (100 Thousand)...
Benchmarking MapSet.equal? when the sets are not equal with input Small (1 Thousand)...

##### With input Middle (100 Thousand) #####
Name                                                ips        average  deviation         median         99th %
MapSet.equal? when the sets are not equal        9.66 M       0.103 μs    ±69.85%       0.135 μs        0.30 μs
IntSet.equal? when the sets are not equal        0.86 M        1.16 μs    ±67.34%        1.49 μs        3.19 μs

Comparison: 
MapSet.equal? when the sets are not equal        9.66 M
IntSet.equal? when the sets are not equal        0.86 M - 11.24x slower +1.06 μs

Memory usage statistics:

Name                                              average  deviation         median         99th %
MapSet.equal? when the sets are not equal            0 KB     ±0.00%           0 KB           0 KB
IntSet.equal? when the sets are not equal         2.07 KB    ±33.04%        1.71 KB        3.37 KB

Comparison: 
MapSet.equal? when the sets are not equal            0 KB
IntSet.equal? when the sets are not equal         2.07 KB - ∞ x memory usage +2.07 KB

##### With input Small (1 Thousand) #####
Name                                                ips        average  deviation         median         99th %
MapSet.equal? when the sets are not equal       11.17 M      0.0896 μs    ±75.36%       0.135 μs       0.145 μs
IntSet.equal? when the sets are not equal        0.86 M        1.16 μs   ±323.40%           0 μs       15.98 μs

Comparison: 
MapSet.equal? when the sets are not equal       11.17 M
IntSet.equal? when the sets are not equal        0.86 M - 12.92x slower +1.07 μs

Memory usage statistics:

Name                                              average  deviation         median         99th %
MapSet.equal? when the sets are not equal            0 KB     ±0.00%           0 KB           0 KB
IntSet.equal? when the sets are not equal         1.91 KB    ±18.59%        1.71 KB        2.54 KB

Comparison: 
MapSet.equal? when the sets are not equal            0 KB
IntSet.equal? when the sets are not equal         1.91 KB - ∞ x memory usage +1.91 KB
